/**
 * transpile second order JSON markov chain to C++ map-map-map form
 * Copyright (C) 2016 Alyssa Rosenzweig
 * ALL RIGHTS REVERSED
 */

const fs = require("fs"),
      chain = JSON.parse(fs.readFileSync(process.argv[2]).toString()),
      serialized = assign(serialize(chain));

console.log(serialized);

function assign(con) {
    return ["/* autogenerated output */",
            "/* feel free to edit </3 */",
            "",
            "#ifndef __MARKOV_CHAIN",
            "#define __MARKOV_CHAIN",
            '#include "markov.h"',
            "MarkovChain __chain;",
            "void initialize_chain() {",
            con,
            "}",
            "#endif"].join("\n");
}

function serialize(json) {
    /*if(typeof json === 'number') return json;
    if(typeof json === 'string') return JSON.stringify(json);
    if(typeof json === 'object') return map(json);

    console.error("*shrugs*");*/

    let out = [];

    Object.keys(json).forEach(A => Object.keys(json[A]).forEach(B => Object.keys(json[A][B]).forEach(C => {
        out.push(`    __chain[${w(A)}][${w(B)}][${w(C)}] = ${json[A][B][C]};`)
    })));

    return out.join("\n");
}

function w(k) {
    return JSON.stringify(k);
}
